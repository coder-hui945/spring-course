<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--把数据库的配置信息从jdbc.properties配置文件中读取，解耦合-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--声明数据源DataSource：连接数据库-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!--set注入，给DruidDataSource提供连接数据库的信息-->
        <property name="url" value="${jdbc.url}"/><!--serUrl()-->
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>


    <!--声明mybatis中提供的SqlSessionFactoryBean类，这个类的内部创建SqlSessionFactory的-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，把数据库连接池赋给dataSource-->
        <property name="dataSource" ref="myDataSource"/>
        <!--mybatis主配置文件的位置
        configLocation是Resource类型，读取配置文件的。赋值使用value，指定文件路径，使用classpath：表示文件位置
        -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>
    <!--创建dao对象，使用sqlSession的getMapper（StudentDao.getClass）
    MapperScannerConfigurer类在内部调用getMapper（）生成每个dao接口的代理对象。

    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定sqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定包名，包名是dao接口所在的包名
        MapperScannerConfigurer类会扫描这个包中的所有接口，把每个接口都执行一次getMapper（）方法
        ，得到每个接口的dao对象。创建好的对象放入spring容器中统一管理。
        dao对象的默认名称为接口的名称（首字母小写）
        -->
        <property name="basePackage" value="com.wuminghui.dao"/><!--多个包用，分隔-->
    </bean>
    <bean id="buyService" class="com.wuminghui.service.impl.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"></property>
        <property name="saleDao" ref="saleDao"></property>
    </bean>

        <!--声明式事务处理：和源代码完全分离-->
    <!--1.声明事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!--2.声明业务方法的事务属性：隔离级别，传播行为，超时时间
            id:自定义名称，表示<tx:advice></tx:advice>标签中间的配置内容
            transaction-manager：事务管理器对象的id
        -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager"><!--配置事务通知(切面)-->
        <!--tx:attributes:表示配置事务属性-->
        <tx:attributes>
            <!--<tx:method>标签可以有多个，分别给不同的方法配置事务属性属性
                name:方法名（不带包和类的完整方法名），可以使用通配符 *
                propagation：传播行为，是枚举值
                isolation：隔离级别
                rollback-for：指定回滚的异常类名，全限定类名。
            -->
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="java.lang.NullPointerException，com.wuminghui.excep.NotEnoughException"/>
        </tx:attributes>
    </tx:advice>
    <!--配置aop：区分不同包中的相同名称的类-->
    <aop:config>
        <!--配置切入点表达式：指定哪些包中的类要使用事务
        id:切入点表达式的名称
        expression：切入点表达式，指定哪些表达式要使用事务，aspectj就会创建代理对象

        -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--配置增强器：关联advice和pointcut,表明哪些类需要应用事务。
        advice-ref:通知，上面的<tx：advice>那里的配置
        pointcut-ref：切入点表达式的id
        -->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>
</beans>